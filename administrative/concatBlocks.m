function data_all = concatBlocks(sbj_name, project_name, block_names,dirs,el,freq_band,datatype,concatfields,tag)

% this function concatenates data (either spectral or single timecourse) across blocks for a single electrode
%% INPUTS:
%       sbj_name: subject name
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       el: electrode number
%       datatype: 'CAR','HFB',or 'Spec'
%       concatfields: cell of field(s) in data to concatenate (e.g.
%                     'phase', 'wave') in addition to trialinfo
%       tag: tag in filename between data type and block name, specifying which type of data to load (e.g. 'stimlock_bl_corr')
%       concatParams.run_blc: true or false (whether to run baseline correction)
%                   .bl_win: time window (in sec) to use for baseline
%                   .power: true or false

%%

for i = 1:length(concatfields)
    data_all.(concatfields{i}) = [];
end

data_all.trialinfo = [];
for bi = 1:length(block_names)
    bn = block_names{bi};
    dir_in = [dirs.data_root,filesep,datatype,'Data',filesep,freq_band,filesep,sbj_name,filesep,bn,filesep,'EpochData'];
    
    load(sprintf('%s/%siEEG_%s_%s_%.2d.mat',dir_in,freq_band,tag,bn,el));
    
    % concatenante EEG data across blocks
    for i = 1:length(concatfields)
        if strcmp(datatype,'Spec')
            data_all.(concatfields{i}) = cat(2,data_all.(concatfields{i}),data.(concatfields{i}));
        else
            data_all.(concatfields{i}) = cat(1,data_all.(concatfields{i}),data.(concatfields{i}));
        end
    end
    data.trialinfo.block = cell(height(data.trialinfo),1);
    data.trialinfo.block(:) = {bn}; % keep track of which trials coming from which block
    
    % Specifics of each project
    switch project_name
        case 'Calculia'
            data.trialinfo.keys = [];
            for i = 1:size(data.trialinfo,1)
                if data.trialinfo.isActive(i) == 1
                    data.trialinfo.condNames(i) = {[data.trialinfo.condNames{i} '_active']};
                else
                    data.trialinfo.condNames(i) = {[data.trialinfo.condNames{i} '_passive']};
                end
            end
            
        case 'MMR'
            for i = 1:size(data.trialinfo,1)
                if data.trialinfo.isCalc(i) == 1
                    if data.trialinfo.AbsDeviant(i) == 1
                        data.trialinfo.correctness{i} = 'correct';
                    elseif data.trialinfo.AbsDeviant(i) > 0
                        data.trialinfo.correctness{i} = 'incorrect';
                    else
                    end
                else
                    data.trialinfo.correctness{i} = 'no math';
                end
            end
            
        case 'Context'
            data.trialinfo.condNames2 = data.trialinfo.condNames;
            data.trialinfo.condNamesBasic = data.trialinfo.condNames;
            for i = 1:size(data.trialinfo,1)
                if data.trialinfo.isActive(i) == 1
                    data.trialinfo.condNames(i) = {[data.trialinfo.condition{i} '_active']};
                    data.trialinfo.condNamesBasic(i) = {'active'};
                else
                    data.trialinfo.condNames(i) = {[data.trialinfo.condition{i} '_passive']};
                    data.trialinfo.condNamesBasic(i) = {'passive'};
                end
            end
            
        case 'EglyDriver'
            %             interval_tmp = discretize(data.trialinfo.int_cue_targ_time, 5);
            %             data.trialinfo.condNames_interval = cellstr(num2str(interval_tmp));
            for i = 1:size(data.trialinfo,1)
                if data.trialinfo.cue_pos(i) == 1 || data.trialinfo.cue_pos(i) == 2
                    data.trialinfo.CondNamesCueLoc{i} = [data.trialinfo.CondNames{i} '_left'];
                else
                    data.trialinfo.CondNamesCueLoc{i} = [data.trialinfo.CondNames{i} '_right'];
                end
            end
            
            
            
            
        case 'EglyDriver_stim'
            for i = 1:size(data.trialinfo,1)
                if data.trialinfo.TTL(i,3) == 128
                    data.trialinfo.CondNames{i} = [data.trialinfo.CondNames{i} '_stim'];
                else
                    data.trialinfo.CondNames{i} = [data.trialinfo.CondNames{i} '_nostim'];
                end
            end
            
    end
    
    % concatenate trial info across blocks
    data_all.trialinfo = [data_all.trialinfo; data.trialinfo];
    
    
    
end

% add all additional info back to concatenated data structure (e.g. channame, time, freq)
allfields = setdiff(fieldnames(data),{'wave','phase','trialinfo'});
for fi = 1:length(allfields)
    data_all.(allfields{fi})=data.(allfields{fi});
end
